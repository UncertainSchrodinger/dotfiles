#!/usr/bin/env zsh
# Installs all my dotfiles and software.

set -e

# Make sure we're relative to the install script
cd "$(dirname "$0")"

# Make sure the helper functions are loaded. Although
# these are loaded in the .zshrc we still need to make
# them available in case this is the first run and
# system is really not setup yet.
source "./zsh/functions/is_os"

# Setup some colors
ERROR='\033[0;31m'
OK='\033[0;32m'
NC='\033[0m' # No Color

# Wrap ln -sfn with print so I can verify stuff goes
# where it probably should go.
symlink() {
  echo "  ${OK}Linking $1 -> $2$NC"
  ln -sfn $1 $2
}

mkdirp() {
  echo "  ${OK}Creating directories $1$NC"
  mkdir -p $1
}

if ! if_osx && ! if_linux ; then
  >&2 echo "${ERROR}Exiting due to unknown OS $OSTYPE"
  >&2 echo "OSTYPE should be one of *darwin* or *linux*$NC"
  echo "No dotfiles have been changed!"
  exit 1
fi

echo "Running dotfiles from $(pwd)\n"

# Common configuration for all operating systems
echo "Setting up common configuration"
mkdirp $HOME/development
mkdirp $HOME/development/personal
mkdirp $HOME/development/work
mkdirp $HOME/development/work/clients
mkdirp $HOME/development/work/internal

mkdirp $HOME/.local
mkdirp $HOME/.config

symlink "$(pwd)/aliases"              $HOME/.aliases

symlink "$(pwd)/bin"                  $HOME/.local/bin

symlink "$(pwd)/git_template"         $HOME/.git_template

mkdirp  "$HOME/.ssh"
symlink "$(pwd)/ssh/config"           $HOME/.ssh/config

symlink "$(pwd)/gemrc"                $HOME/.gemrc

symlink "$(pwd)/gitconfig"            $HOME/.gitconfig
symlink "$(pwd)/gitignore"            $HOME/.gitignore
symlink "$(pwd)/gitmessage"           $HOME/.gitmessage

symlink "$(pwd)/psqlrc"               $HOME/.psqlrc
symlink "$(pwd)/rspec"                $HOME/.rspec

symlink "$(pwd)/tmux"                 $HOME/.config/tmux
symlink "$(pwd)/tmux.conf"            $HOME/.tmux.conf

# NeoVim configuration
mkdirp  "$HOME/.config/nvim"
symlink "$(pwd)/nvim/init.lua"        "$HOME/.config/nvim/init.lua"
symlink "$(pwd)/nvim/lua"             "$HOME/.config/nvim/lua"

mkdirp  "$HOME/.zsh"
symlink "$(pwd)/zsh/functions"        $HOME/.zsh/functions
symlink "$(pwd)/zshenv"               $HOME/.zshenv
symlink "$(pwd)/zshrc"                $HOME/.zshrc
echo "Setup done for common configuration\n"

mkdirp $HOME/.config/alacritty
symlink "$(pwd)/alacritty/alacritty.toml"  $HOME/.config/alacritty/alacritty.toml

if [ ! -d ~/.config/alacritty/catppuccin ]; then
  # Colorscheme for alacritty
  git clone https://github.com/catppuccin/alacritty.git ~/.config/alacritty/catppuccin
else
  (
    cd ~/.config/alacritty/catppuccin
    git fetch
    git reset --hard '@{u}'
  )
fi

# Linux specific setup, only works on Arch linux
if if_linux ; then
  echo "Setting up Linux"

  mkdirp "$HOME/aur/"

  echo "Setting up yay"

  # Setup yay, helper for aur packages. I went a long time without using this
  # but some packages depend on other aur packages and managing all of those by
  # hand is madness.
  if [ ! -d ~/aur/yay ]; then
    (
      # Clone and install yay
      git clone https://aur.archlinux.org/yay.git ~/aur/yay
      cd ~/aur/yay
      makepkg -si

      # Create a database for development packages. These are packages that
      # don't have versions but are rather always built from source. Master
      # tracking releases for lack of a better term.
      yay -Y --gendb

      # Always update development packages. Packages like Pob tend to update
      # often and have to be updated through aur.
      yay -Y --devel --save
    )
  fi

  echo "Yay setup done"

  # TODO: Enable multilib

  # First install missing packages to have all configuration directories created
  # with correct permissions and don't cache sudo credentials, as that would
  # likely fuck up more stuff later on.
  if [ -f "pkglist-$(hostnamectl hostname).txt" ]; then
    sudo -k pacman -Sy --needed - < "pkglist-$(hostnamectl hostname).txt"
  fi

  symlink "$(pwd)/xinitrc"                  $HOME/.xinitrc

  mkdirp $HOME/.config/i3
  symlink "$(pwd)/i3/config"                $HOME/.config/i3/config

  mkdirp $HOME/.config/dunst
  symlink "$(pwd)/dunst/dunstrc"            $HOME/.config/dunst/dunstrc

  mkdirp $HOME/.config/polybar
  symlink "$(pwd)/polybar/config"           $HOME/.config/polybar/config
  symlink "$(pwd)/polybar/launch.sh"        $HOME/.config/polybar/launch.sh

  symlink "$(pwd)/rofi"         $HOME/.config/rofi

  sudo -k cp "$(pwd)/X11/50-mouse-acceleration.conf" "/etc/X11/xorg.conf.d/50-mouse-acceleration.conf"

  symlink "$(pwd)/alacritty/linux.toml"  $HOME/.config/alacritty/override.toml

  echo "Dotfiles configured"

  echo "Installing packages"

  # TODO(tatu): Automate later
  # Installed through AUR:
  # - spotify
  # - mise
  # - makemkv
  # - mise
  # - path-of-building-community-git
  # - rojekti
  # - ruby-build
  # - spotify

  echo "Setup done for Linux\n"
fi

if if_osx; then
  echo "Setting up macOS"

  symlink "$(pwd)/alacritty/osx.toml"  $HOME/.config/alacritty/override.toml

  echo "Installing packages from Brewfile"
  brew bundle install

  echo "  ${OK}Setup done for macOS\n$NC"
fi

echo "${OK}All done!$NC"
